# coding: utf-8

"""
    Allele Calling Service

    The Allele Calling  service provides an API for converting raw sequence data to GFE and HLA allele calls.

    OpenAPI spec version: 0.0.3
    Contact: mhalagan@nmdp.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Feature(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accession': 'int',
        'rank': 'int',
        'sequence': 'str',
        'term': 'str'
    }

    attribute_map = {
        'accession': 'accession',
        'rank': 'rank',
        'sequence': 'sequence',
        'term': 'term'
    }

    def __init__(self, accession=None, rank=None, sequence=None, term=None):
        """
        Feature - a model defined in Swagger
        """

        self._accession = None
        self._rank = None
        self._sequence = None
        self._term = None

        if accession is not None:
          self.accession = accession
        if rank is not None:
          self.rank = rank
        if sequence is not None:
          self.sequence = sequence
        if term is not None:
          self.term = term

    @property
    def accession(self):
        """
        Gets the accession of this Feature.

        :return: The accession of this Feature.
        :rtype: int
        """
        return self._accession

    @accession.setter
    def accession(self, accession):
        """
        Sets the accession of this Feature.

        :param accession: The accession of this Feature.
        :type: int
        """

        self._accession = accession

    @property
    def rank(self):
        """
        Gets the rank of this Feature.

        :return: The rank of this Feature.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """
        Sets the rank of this Feature.

        :param rank: The rank of this Feature.
        :type: int
        """

        self._rank = rank

    @property
    def sequence(self):
        """
        Gets the sequence of this Feature.

        :return: The sequence of this Feature.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """
        Sets the sequence of this Feature.

        :param sequence: The sequence of this Feature.
        :type: str
        """

        self._sequence = sequence

    @property
    def term(self):
        """
        Gets the term of this Feature.

        :return: The term of this Feature.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """
        Sets the term of this Feature.

        :param term: The term of this Feature.
        :type: str
        """

        self._term = term

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Feature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
