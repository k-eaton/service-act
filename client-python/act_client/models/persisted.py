# coding: utf-8

"""
    Allele Calling Service

    The Allele Calling  service provides an API for converting raw sequence data to GFE and HLA allele calls.

    OpenAPI spec version: 0.0.4
    Contact: mhalagan@nmdp.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Persisted(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'persisted_data': 'list[PersistedData]',
        'act_version': 'str',
        'gfedb_version': 'str'
    }

    attribute_map = {
        'persisted_data': 'persisted_data',
        'act_version': 'act_version',
        'gfedb_version': 'gfedb_version'
    }

    def __init__(self, persisted_data=None, act_version=None, gfedb_version=None):
        """
        Persisted - a model defined in Swagger
        """

        self._persisted_data = None
        self._act_version = None
        self._gfedb_version = None

        if persisted_data is not None:
          self.persisted_data = persisted_data
        if act_version is not None:
          self.act_version = act_version
        if gfedb_version is not None:
          self.gfedb_version = gfedb_version

    @property
    def persisted_data(self):
        """
        Gets the persisted_data of this Persisted.

        :return: The persisted_data of this Persisted.
        :rtype: list[PersistedData]
        """
        return self._persisted_data

    @persisted_data.setter
    def persisted_data(self, persisted_data):
        """
        Sets the persisted_data of this Persisted.

        :param persisted_data: The persisted_data of this Persisted.
        :type: list[PersistedData]
        """

        self._persisted_data = persisted_data

    @property
    def act_version(self):
        """
        Gets the act_version of this Persisted.

        :return: The act_version of this Persisted.
        :rtype: str
        """
        return self._act_version

    @act_version.setter
    def act_version(self, act_version):
        """
        Sets the act_version of this Persisted.

        :param act_version: The act_version of this Persisted.
        :type: str
        """

        self._act_version = act_version

    @property
    def gfedb_version(self):
        """
        Gets the gfedb_version of this Persisted.

        :return: The gfedb_version of this Persisted.
        :rtype: str
        """
        return self._gfedb_version

    @gfedb_version.setter
    def gfedb_version(self, gfedb_version):
        """
        Sets the gfedb_version of this Persisted.

        :param gfedb_version: The gfedb_version of this Persisted.
        :type: str
        """

        self._gfedb_version = gfedb_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Persisted):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
