# coding: utf-8

"""
    Allele Calling Service

    The Allele Calling  service provides an API for converting raw sequence data to GFE and HLA allele calls.

    OpenAPI spec version: 0.0.4
    Contact: mhalagan@nmdp.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def act_get(self, locus, **kwargs):
        """
        Get HLA and GFE from consensus sequence or GFE notation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.act_get(locus, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str locus: Valid HLA locus (required)
        :param str sequence: Consensus sequence
        :param str gfe: GFE Notation
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :param bool persist: Flag for persisting the data in the GFE DB
        :return: AlleleCall
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.act_get_with_http_info(locus, **kwargs)
        else:
            (data) = self.act_get_with_http_info(locus, **kwargs)
            return data

    def act_get_with_http_info(self, locus, **kwargs):
        """
        Get HLA and GFE from consensus sequence or GFE notation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.act_get_with_http_info(locus, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str locus: Valid HLA locus (required)
        :param str sequence: Consensus sequence
        :param str gfe: GFE Notation
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :param bool persist: Flag for persisting the data in the GFE DB
        :return: AlleleCall
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locus', 'sequence', 'gfe', 'neo4j_url', 'user', 'password', 'gfe_url', 'verbose', 'persist']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method act_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locus' is set
        if ('locus' not in params) or (params['locus'] is None):
            raise ValueError("Missing the required parameter `locus` when calling `act_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locus' in params:
            query_params.append(('locus', params['locus']))
        if 'sequence' in params:
            query_params.append(('sequence', params['sequence']))
        if 'gfe' in params:
            query_params.append(('gfe', params['gfe']))
        if 'neo4j_url' in params:
            query_params.append(('neo4j_url', params['neo4j_url']))
        if 'user' in params:
            query_params.append(('user', params['user']))
        if 'password' in params:
            query_params.append(('password', params['password']))
        if 'gfe_url' in params:
            query_params.append(('gfe_url', params['gfe_url']))
        if 'verbose' in params:
            query_params.append(('verbose', params['verbose']))
        if 'persist' in params:
            query_params.append(('persist', params['persist']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/act', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AlleleCall',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def actformat_get(self, locus, format_type, **kwargs):
        """
        Get HLA and GFE from consensus sequence or GFE notation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.actformat_get(locus, format_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str locus: Valid HLA locus (required)
        :param str format_type: Specify the data format that will be returned (required)
        :param str sequence: Consensus sequence
        :param str gfe: GFE Notation
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :param bool persist: Flag for persisting the data in the GFE DB
        :return: AlleleCall
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.actformat_get_with_http_info(locus, format_type, **kwargs)
        else:
            (data) = self.actformat_get_with_http_info(locus, format_type, **kwargs)
            return data

    def actformat_get_with_http_info(self, locus, format_type, **kwargs):
        """
        Get HLA and GFE from consensus sequence or GFE notation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.actformat_get_with_http_info(locus, format_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str locus: Valid HLA locus (required)
        :param str format_type: Specify the data format that will be returned (required)
        :param str sequence: Consensus sequence
        :param str gfe: GFE Notation
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :param bool persist: Flag for persisting the data in the GFE DB
        :return: AlleleCall
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locus', 'format_type', 'sequence', 'gfe', 'neo4j_url', 'user', 'password', 'gfe_url', 'verbose', 'persist']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actformat_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locus' is set
        if ('locus' not in params) or (params['locus'] is None):
            raise ValueError("Missing the required parameter `locus` when calling `actformat_get`")
        # verify the required parameter 'format_type' is set
        if ('format_type' not in params) or (params['format_type'] is None):
            raise ValueError("Missing the required parameter `format_type` when calling `actformat_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locus' in params:
            query_params.append(('locus', params['locus']))
        if 'sequence' in params:
            query_params.append(('sequence', params['sequence']))
        if 'gfe' in params:
            query_params.append(('gfe', params['gfe']))
        if 'format_type' in params:
            query_params.append(('format_type', params['format_type']))
        if 'neo4j_url' in params:
            query_params.append(('neo4j_url', params['neo4j_url']))
        if 'user' in params:
            query_params.append(('user', params['user']))
        if 'password' in params:
            query_params.append(('password', params['password']))
        if 'gfe_url' in params:
            query_params.append(('gfe_url', params['gfe_url']))
        if 'verbose' in params:
            query_params.append(('verbose', params['verbose']))
        if 'persist' in params:
            query_params.append(('persist', params['persist']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/act_format', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AlleleCall',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def ars_get(self, allele, group, **kwargs):
        """
        Get ARS group associated with a GFE notation or HLA allele
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ars_get(allele, group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allele: HLA allele or GFE Notation (required)
        :param str group: ARS Group Type (required)
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :return: ArsCall
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ars_get_with_http_info(allele, group, **kwargs)
        else:
            (data) = self.ars_get_with_http_info(allele, group, **kwargs)
            return data

    def ars_get_with_http_info(self, allele, group, **kwargs):
        """
        Get ARS group associated with a GFE notation or HLA allele
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ars_get_with_http_info(allele, group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allele: HLA allele or GFE Notation (required)
        :param str group: ARS Group Type (required)
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :return: ArsCall
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allele', 'group', 'neo4j_url', 'user', 'password', 'gfe_url', 'verbose']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ars_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allele' is set
        if ('allele' not in params) or (params['allele'] is None):
            raise ValueError("Missing the required parameter `allele` when calling `ars_get`")
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `ars_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'allele' in params:
            query_params.append(('allele', params['allele']))
        if 'group' in params:
            query_params.append(('group', params['group']))
        if 'neo4j_url' in params:
            query_params.append(('neo4j_url', params['neo4j_url']))
        if 'user' in params:
            query_params.append(('user', params['user']))
        if 'password' in params:
            query_params.append(('password', params['password']))
        if 'gfe_url' in params:
            query_params.append(('gfe_url', params['gfe_url']))
        if 'verbose' in params:
            query_params.append(('verbose', params['verbose']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ars', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArsCall',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def feature_get(self, hla, feature, **kwargs):
        """
        GFE notation and HLA alleles associated with an HLA allele or alleles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.feature_get(hla, feature, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] hla: HLA Allele (required)
        :param list[str] feature: HLA feature (required)
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :return: FeatureCall
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.feature_get_with_http_info(hla, feature, **kwargs)
        else:
            (data) = self.feature_get_with_http_info(hla, feature, **kwargs)
            return data

    def feature_get_with_http_info(self, hla, feature, **kwargs):
        """
        GFE notation and HLA alleles associated with an HLA allele or alleles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.feature_get_with_http_info(hla, feature, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] hla: HLA Allele (required)
        :param list[str] feature: HLA feature (required)
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :return: FeatureCall
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hla', 'feature', 'neo4j_url', 'user', 'password', 'gfe_url', 'verbose']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hla' is set
        if ('hla' not in params) or (params['hla'] is None):
            raise ValueError("Missing the required parameter `hla` when calling `feature_get`")
        # verify the required parameter 'feature' is set
        if ('feature' not in params) or (params['feature'] is None):
            raise ValueError("Missing the required parameter `feature` when calling `feature_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hla' in params:
            query_params.append(('hla', params['hla']))
            collection_formats['hla'] = 'multi'
        if 'feature' in params:
            query_params.append(('feature', params['feature']))
            collection_formats['feature'] = 'multi'
        if 'neo4j_url' in params:
            query_params.append(('neo4j_url', params['neo4j_url']))
        if 'user' in params:
            query_params.append(('user', params['user']))
        if 'password' in params:
            query_params.append(('password', params['password']))
        if 'gfe_url' in params:
            query_params.append(('gfe_url', params['gfe_url']))
        if 'verbose' in params:
            query_params.append(('verbose', params['verbose']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/feature_search', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FeatureCall',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gfe_get(self, hla, **kwargs):
        """
        Get GFE notation associated with an HLA allele
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gfe_get(hla, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hla: HLA allele (required)
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :return: GfeCall
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gfe_get_with_http_info(hla, **kwargs)
        else:
            (data) = self.gfe_get_with_http_info(hla, **kwargs)
            return data

    def gfe_get_with_http_info(self, hla, **kwargs):
        """
        Get GFE notation associated with an HLA allele
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gfe_get_with_http_info(hla, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hla: HLA allele (required)
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param str gfe_url: URL for the gfe-service
        :param bool verbose: Flag for running service in verbose
        :return: GfeCall
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hla', 'neo4j_url', 'user', 'password', 'gfe_url', 'verbose']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gfe_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hla' is set
        if ('hla' not in params) or (params['hla'] is None):
            raise ValueError("Missing the required parameter `hla` when calling `gfe_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hla' in params:
            query_params.append(('hla', params['hla']))
        if 'neo4j_url' in params:
            query_params.append(('neo4j_url', params['neo4j_url']))
        if 'user' in params:
            query_params.append(('user', params['user']))
        if 'password' in params:
            query_params.append(('password', params['password']))
        if 'gfe_url' in params:
            query_params.append(('gfe_url', params['gfe_url']))
        if 'verbose' in params:
            query_params.append(('verbose', params['verbose']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/gfe', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GfeCall',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def persist_get(self, **kwargs):
        """
        Get HLA and GFE from consensus sequence or GFE notation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.persist_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param bool verbose: Flag for running service in verbose
        :return: Persisted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.persist_get_with_http_info(**kwargs)
        else:
            (data) = self.persist_get_with_http_info(**kwargs)
            return data

    def persist_get_with_http_info(self, **kwargs):
        """
        Get HLA and GFE from consensus sequence or GFE notation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.persist_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param bool verbose: Flag for running service in verbose
        :return: Persisted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['neo4j_url', 'user', 'password', 'verbose']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persist_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'neo4j_url' in params:
            query_params.append(('neo4j_url', params['neo4j_url']))
        if 'user' in params:
            query_params.append(('user', params['user']))
        if 'password' in params:
            query_params.append(('password', params['password']))
        if 'verbose' in params:
            query_params.append(('verbose', params['verbose']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/persisted_data', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Persisted',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
