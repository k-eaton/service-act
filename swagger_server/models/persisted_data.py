# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class PersistedData(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, hla: str=None, gfe: str=None, term: str=None, rank: str=None, accession: str=None, sequence: str=None):
        """
        PersistedData - a model defined in Swagger

        :param hla: The hla of this PersistedData.
        :type hla: str
        :param gfe: The gfe of this PersistedData.
        :type gfe: str
        :param term: The term of this PersistedData.
        :type term: str
        :param rank: The rank of this PersistedData.
        :type rank: str
        :param accession: The accession of this PersistedData.
        :type accession: str
        :param sequence: The sequence of this PersistedData.
        :type sequence: str
        """
        self.swagger_types = {
            'hla': str,
            'gfe': str,
            'term': str,
            'rank': str,
            'accession': str,
            'sequence': str
        }

        self.attribute_map = {
            'hla': 'hla',
            'gfe': 'gfe',
            'term': 'term',
            'rank': 'rank',
            'accession': 'accession',
            'sequence': 'sequence'
        }

        self._hla = hla
        self._gfe = gfe
        self._term = term
        self._rank = rank
        self._accession = accession
        self._sequence = sequence

    @classmethod
    def from_dict(cls, dikt) -> 'PersistedData':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PersistedData of this PersistedData.
        :rtype: PersistedData
        """
        return deserialize_model(dikt, cls)

    @property
    def hla(self) -> str:
        """
        Gets the hla of this PersistedData.

        :return: The hla of this PersistedData.
        :rtype: str
        """
        return self._hla

    @hla.setter
    def hla(self, hla: str):
        """
        Sets the hla of this PersistedData.

        :param hla: The hla of this PersistedData.
        :type hla: str
        """

        self._hla = hla

    @property
    def gfe(self) -> str:
        """
        Gets the gfe of this PersistedData.

        :return: The gfe of this PersistedData.
        :rtype: str
        """
        return self._gfe

    @gfe.setter
    def gfe(self, gfe: str):
        """
        Sets the gfe of this PersistedData.

        :param gfe: The gfe of this PersistedData.
        :type gfe: str
        """

        self._gfe = gfe

    @property
    def term(self) -> str:
        """
        Gets the term of this PersistedData.

        :return: The term of this PersistedData.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term: str):
        """
        Sets the term of this PersistedData.

        :param term: The term of this PersistedData.
        :type term: str
        """

        self._term = term

    @property
    def rank(self) -> str:
        """
        Gets the rank of this PersistedData.

        :return: The rank of this PersistedData.
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank: str):
        """
        Sets the rank of this PersistedData.

        :param rank: The rank of this PersistedData.
        :type rank: str
        """

        self._rank = rank

    @property
    def accession(self) -> str:
        """
        Gets the accession of this PersistedData.

        :return: The accession of this PersistedData.
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession: str):
        """
        Sets the accession of this PersistedData.

        :param accession: The accession of this PersistedData.
        :type accession: str
        """

        self._accession = accession

    @property
    def sequence(self) -> str:
        """
        Gets the sequence of this PersistedData.

        :return: The sequence of this PersistedData.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence: str):
        """
        Sets the sequence of this PersistedData.

        :param sequence: The sequence of this PersistedData.
        :type sequence: str
        """

        self._sequence = sequence

