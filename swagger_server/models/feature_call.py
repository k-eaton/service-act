# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.inline_response200_typing import InlineResponse200Typing
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FeatureCall(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alleles: List[str]=None, features_searched: List[str]=None, matched: List[InlineResponse200Typing]=None, act_version: str=None, gfe_version: str=None, gfedb_version: str=None):
        """
        FeatureCall - a model defined in Swagger

        :param alleles: The alleles of this FeatureCall.
        :type alleles: List[str]
        :param features_searched: The features_searched of this FeatureCall.
        :type features_searched: List[str]
        :param matched: The matched of this FeatureCall.
        :type matched: List[InlineResponse200Typing]
        :param act_version: The act_version of this FeatureCall.
        :type act_version: str
        :param gfe_version: The gfe_version of this FeatureCall.
        :type gfe_version: str
        :param gfedb_version: The gfedb_version of this FeatureCall.
        :type gfedb_version: str
        """
        self.swagger_types = {
            'alleles': List[str],
            'features_searched': List[str],
            'matched': List[InlineResponse200Typing],
            'act_version': str,
            'gfe_version': str,
            'gfedb_version': str
        }

        self.attribute_map = {
            'alleles': 'alleles',
            'features_searched': 'features_searched',
            'matched': 'matched',
            'act_version': 'act_version',
            'gfe_version': 'gfe_version',
            'gfedb_version': 'gfedb_version'
        }

        self._alleles = alleles
        self._features_searched = features_searched
        self._matched = matched
        self._act_version = act_version
        self._gfe_version = gfe_version
        self._gfedb_version = gfedb_version

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureCall':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureCall of this FeatureCall.
        :rtype: FeatureCall
        """
        return deserialize_model(dikt, cls)

    @property
    def alleles(self) -> List[str]:
        """
        Gets the alleles of this FeatureCall.

        :return: The alleles of this FeatureCall.
        :rtype: List[str]
        """
        return self._alleles

    @alleles.setter
    def alleles(self, alleles: List[str]):
        """
        Sets the alleles of this FeatureCall.

        :param alleles: The alleles of this FeatureCall.
        :type alleles: List[str]
        """

        self._alleles = alleles

    @property
    def features_searched(self) -> List[str]:
        """
        Gets the features_searched of this FeatureCall.

        :return: The features_searched of this FeatureCall.
        :rtype: List[str]
        """
        return self._features_searched

    @features_searched.setter
    def features_searched(self, features_searched: List[str]):
        """
        Sets the features_searched of this FeatureCall.

        :param features_searched: The features_searched of this FeatureCall.
        :type features_searched: List[str]
        """

        self._features_searched = features_searched

    @property
    def matched(self) -> List[InlineResponse200Typing]:
        """
        Gets the matched of this FeatureCall.

        :return: The matched of this FeatureCall.
        :rtype: List[InlineResponse200Typing]
        """
        return self._matched

    @matched.setter
    def matched(self, matched: List[InlineResponse200Typing]):
        """
        Sets the matched of this FeatureCall.

        :param matched: The matched of this FeatureCall.
        :type matched: List[InlineResponse200Typing]
        """

        self._matched = matched

    @property
    def act_version(self) -> str:
        """
        Gets the act_version of this FeatureCall.

        :return: The act_version of this FeatureCall.
        :rtype: str
        """
        return self._act_version

    @act_version.setter
    def act_version(self, act_version: str):
        """
        Sets the act_version of this FeatureCall.

        :param act_version: The act_version of this FeatureCall.
        :type act_version: str
        """

        self._act_version = act_version

    @property
    def gfe_version(self) -> str:
        """
        Gets the gfe_version of this FeatureCall.

        :return: The gfe_version of this FeatureCall.
        :rtype: str
        """
        return self._gfe_version

    @gfe_version.setter
    def gfe_version(self, gfe_version: str):
        """
        Sets the gfe_version of this FeatureCall.

        :param gfe_version: The gfe_version of this FeatureCall.
        :type gfe_version: str
        """

        self._gfe_version = gfe_version

    @property
    def gfedb_version(self) -> str:
        """
        Gets the gfedb_version of this FeatureCall.

        :return: The gfedb_version of this FeatureCall.
        :rtype: str
        """
        return self._gfedb_version

    @gfedb_version.setter
    def gfedb_version(self, gfedb_version: str):
        """
        Sets the gfedb_version of this FeatureCall.

        :param gfedb_version: The gfedb_version of this FeatureCall.
        :type gfedb_version: str
        """

        self._gfedb_version = gfedb_version

