# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.feature import Feature
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class TypingStatus(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status: str=None, novel_features: List[Feature]=None):
        """
        TypingStatus - a model defined in Swagger

        :param status: The status of this TypingStatus.
        :type status: str
        :param novel_features: The novel_features of this TypingStatus.
        :type novel_features: List[Feature]
        """
        self.swagger_types = {
            'status': str,
            'novel_features': List[Feature]
        }

        self.attribute_map = {
            'status': 'status',
            'novel_features': 'novel_features'
        }

        self._status = status
        self._novel_features = novel_features

    @classmethod
    def from_dict(cls, dikt) -> 'TypingStatus':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TypingStatus of this TypingStatus.
        :rtype: TypingStatus
        """
        return deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """
        Gets the status of this TypingStatus.

        :return: The status of this TypingStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this TypingStatus.

        :param status: The status of this TypingStatus.
        :type status: str
        """

        self._status = status

    @property
    def novel_features(self) -> List[Feature]:
        """
        Gets the novel_features of this TypingStatus.

        :return: The novel_features of this TypingStatus.
        :rtype: List[Feature]
        """
        return self._novel_features

    @novel_features.setter
    def novel_features(self, novel_features: List[Feature]):
        """
        Sets the novel_features of this TypingStatus.

        :param novel_features: The novel_features of this TypingStatus.
        :type novel_features: List[Feature]
        """

        self._novel_features = novel_features

