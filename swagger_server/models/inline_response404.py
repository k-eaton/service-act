# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InlineResponse404(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message: str=None, accession: str=None, file: str=None, gfe: str=None, log: List[str]=None, rank: int=None, sequence: str=None, term: str=None, type: str=None, version: str=None):
        """
        InlineResponse404 - a model defined in Swagger

        :param message: The message of this InlineResponse404.
        :type message: str
        :param accession: The accession of this InlineResponse404.
        :type accession: str
        :param file: The file of this InlineResponse404.
        :type file: str
        :param gfe: The gfe of this InlineResponse404.
        :type gfe: str
        :param log: The log of this InlineResponse404.
        :type log: List[str]
        :param rank: The rank of this InlineResponse404.
        :type rank: int
        :param sequence: The sequence of this InlineResponse404.
        :type sequence: str
        :param term: The term of this InlineResponse404.
        :type term: str
        :param type: The type of this InlineResponse404.
        :type type: str
        :param version: The version of this InlineResponse404.
        :type version: str
        """
        self.swagger_types = {
            'message': str,
            'accession': str,
            'file': str,
            'gfe': str,
            'log': List[str],
            'rank': int,
            'sequence': str,
            'term': str,
            'type': str,
            'version': str
        }

        self.attribute_map = {
            'message': 'Message',
            'accession': 'accession',
            'file': 'file',
            'gfe': 'gfe',
            'log': 'log',
            'rank': 'rank',
            'sequence': 'sequence',
            'term': 'term',
            'type': 'type',
            'version': 'version'
        }

        self._message = message
        self._accession = accession
        self._file = file
        self._gfe = gfe
        self._log = log
        self._rank = rank
        self._sequence = sequence
        self._term = term
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse404':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_404 of this InlineResponse404.
        :rtype: InlineResponse404
        """
        return deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """
        Gets the message of this InlineResponse404.

        :return: The message of this InlineResponse404.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """
        Sets the message of this InlineResponse404.

        :param message: The message of this InlineResponse404.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def accession(self) -> str:
        """
        Gets the accession of this InlineResponse404.

        :return: The accession of this InlineResponse404.
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession: str):
        """
        Sets the accession of this InlineResponse404.

        :param accession: The accession of this InlineResponse404.
        :type accession: str
        """

        self._accession = accession

    @property
    def file(self) -> str:
        """
        Gets the file of this InlineResponse404.

        :return: The file of this InlineResponse404.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file: str):
        """
        Sets the file of this InlineResponse404.

        :param file: The file of this InlineResponse404.
        :type file: str
        """

        self._file = file

    @property
    def gfe(self) -> str:
        """
        Gets the gfe of this InlineResponse404.

        :return: The gfe of this InlineResponse404.
        :rtype: str
        """
        return self._gfe

    @gfe.setter
    def gfe(self, gfe: str):
        """
        Sets the gfe of this InlineResponse404.

        :param gfe: The gfe of this InlineResponse404.
        :type gfe: str
        """

        self._gfe = gfe

    @property
    def log(self) -> List[str]:
        """
        Gets the log of this InlineResponse404.

        :return: The log of this InlineResponse404.
        :rtype: List[str]
        """
        return self._log

    @log.setter
    def log(self, log: List[str]):
        """
        Sets the log of this InlineResponse404.

        :param log: The log of this InlineResponse404.
        :type log: List[str]
        """

        self._log = log

    @property
    def rank(self) -> int:
        """
        Gets the rank of this InlineResponse404.

        :return: The rank of this InlineResponse404.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank: int):
        """
        Sets the rank of this InlineResponse404.

        :param rank: The rank of this InlineResponse404.
        :type rank: int
        """

        self._rank = rank

    @property
    def sequence(self) -> str:
        """
        Gets the sequence of this InlineResponse404.

        :return: The sequence of this InlineResponse404.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence: str):
        """
        Sets the sequence of this InlineResponse404.

        :param sequence: The sequence of this InlineResponse404.
        :type sequence: str
        """

        self._sequence = sequence

    @property
    def term(self) -> str:
        """
        Gets the term of this InlineResponse404.

        :return: The term of this InlineResponse404.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term: str):
        """
        Sets the term of this InlineResponse404.

        :param term: The term of this InlineResponse404.
        :type term: str
        """

        self._term = term

    @property
    def type(self) -> str:
        """
        Gets the type of this InlineResponse404.

        :return: The type of this InlineResponse404.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this InlineResponse404.

        :param type: The type of this InlineResponse404.
        :type type: str
        """

        self._type = type

    @property
    def version(self) -> str:
        """
        Gets the version of this InlineResponse404.

        :return: The version of this InlineResponse404.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """
        Sets the version of this InlineResponse404.

        :param version: The version of this InlineResponse404.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

