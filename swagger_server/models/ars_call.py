# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.typing import Typing
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ArsCall(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, allele: str=None, group_type: str=None, group: str=None, share_allele: List[Typing]=None, act_version: str=None, gfedb_version: str=None):
        """
        ArsCall - a model defined in Swagger

        :param allele: The allele of this ArsCall.
        :type allele: str
        :param group_type: The group_type of this ArsCall.
        :type group_type: str
        :param group: The group of this ArsCall.
        :type group: str
        :param share_allele: The share_allele of this ArsCall.
        :type share_allele: List[Typing]
        :param act_version: The act_version of this ArsCall.
        :type act_version: str
        :param gfedb_version: The gfedb_version of this ArsCall.
        :type gfedb_version: str
        """
        self.swagger_types = {
            'allele': str,
            'group_type': str,
            'group': str,
            'share_allele': List[Typing],
            'act_version': str,
            'gfedb_version': str
        }

        self.attribute_map = {
            'allele': 'allele',
            'group_type': 'group_type',
            'group': 'group',
            'share_allele': 'share_allele',
            'act_version': 'act_version',
            'gfedb_version': 'gfedb_version'
        }

        self._allele = allele
        self._group_type = group_type
        self._group = group
        self._share_allele = share_allele
        self._act_version = act_version
        self._gfedb_version = gfedb_version

    @classmethod
    def from_dict(cls, dikt) -> 'ArsCall':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ArsCall of this ArsCall.
        :rtype: ArsCall
        """
        return deserialize_model(dikt, cls)

    @property
    def allele(self) -> str:
        """
        Gets the allele of this ArsCall.

        :return: The allele of this ArsCall.
        :rtype: str
        """
        return self._allele

    @allele.setter
    def allele(self, allele: str):
        """
        Sets the allele of this ArsCall.

        :param allele: The allele of this ArsCall.
        :type allele: str
        """

        self._allele = allele

    @property
    def group_type(self) -> str:
        """
        Gets the group_type of this ArsCall.

        :return: The group_type of this ArsCall.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type: str):
        """
        Sets the group_type of this ArsCall.

        :param group_type: The group_type of this ArsCall.
        :type group_type: str
        """

        self._group_type = group_type

    @property
    def group(self) -> str:
        """
        Gets the group of this ArsCall.

        :return: The group of this ArsCall.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """
        Sets the group of this ArsCall.

        :param group: The group of this ArsCall.
        :type group: str
        """

        self._group = group

    @property
    def share_allele(self) -> List[Typing]:
        """
        Gets the share_allele of this ArsCall.

        :return: The share_allele of this ArsCall.
        :rtype: List[Typing]
        """
        return self._share_allele

    @share_allele.setter
    def share_allele(self, share_allele: List[Typing]):
        """
        Sets the share_allele of this ArsCall.

        :param share_allele: The share_allele of this ArsCall.
        :type share_allele: List[Typing]
        """

        self._share_allele = share_allele

    @property
    def act_version(self) -> str:
        """
        Gets the act_version of this ArsCall.

        :return: The act_version of this ArsCall.
        :rtype: str
        """
        return self._act_version

    @act_version.setter
    def act_version(self, act_version: str):
        """
        Sets the act_version of this ArsCall.

        :param act_version: The act_version of this ArsCall.
        :type act_version: str
        """

        self._act_version = act_version

    @property
    def gfedb_version(self) -> str:
        """
        Gets the gfedb_version of this ArsCall.

        :return: The gfedb_version of this ArsCall.
        :rtype: str
        """
        return self._gfedb_version

    @gfedb_version.setter
    def gfedb_version(self, gfedb_version: str):
        """
        Sets the gfedb_version of this ArsCall.

        :param gfedb_version: The gfedb_version of this ArsCall.
        :type gfedb_version: str
        """

        self._gfedb_version = gfedb_version

