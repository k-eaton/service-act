
import argparse
from py2neo import Graph
from gfe_db.act import Act
import os
import pandas as pa
from swagger_server.models.error import Error


def main():
    """This is run if file is directly executed, but not if imported as
    module. Having this in a separate function  allows importing the file
    into interactive python, and still able to execute the
    function for testing"""
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input",
                        required=True,
                        help="Input file",
                        type=str)

    parser.add_argument("-o", "--output",
                        required=True,
                        help="Output filename",
                        type=str)

    parser.add_argument("-l", "--url",
                        default="http://neo4j.b12x.org:80",
                        help="URL for neo4j database - Default ",
                        type=str)

    parser.add_argument("-g", "--gfeurl",
                        default="http://gfe.b12x.org",
                        help="URL for GFE service",
                        type=str)

    parser.add_argument("-u", "--user",
                        default="neo4j",
                        help="Username for neo4j database",
                        type=str)

    parser.add_argument("-p", "--password",
                        default="new",
                        help="Password for neo4j database",
                        type=str)

    parser.add_argument("-c", "--config",
                        help="Option for providing configuration file",
                        type=str)

    parser.add_argument("-v", "--verbose",
                        help="Option for running in verbose",
                        default=False,
                        type=bool)

    args = parser.parse_args()
    inputfile = args.input
    neo4jurl = args.url
    neo4jpass = args.password
    neo4juser = args.user
    gfeurl = args.gfeurl
    output = args.output

    if os.getenv("NEO4JPASS"):
        neo4jpass = os.getenv("NEO4JPASS")

    if os.getenv("NEO4JUSER"):
        neo4juser = os.getenv("NEO4JUSER")

    if os.getenv("NEO4JURL"):
        neo4jurl = os.getenv("NEO4JURL")

    if os.getenv("GFEURL"):
        gfeurl = os.getenv("GFEURL")

    graph = Graph(neo4jurl, user=neo4juser, password=neo4jpass, bolt=False)
    typer = Act(graph, hostname=gfeurl, user=neo4juser, persist=False)

    gfedf = pa.read_table(inputfile, sep=",", header=None,
                          names=["N", "ID", "Locus", "HML",
                                 "GFE", "length", "aligned", "gfe_version"])
    gfe_typing = [None] * len(gfedf['GFE'])

    for i in range(0, len(gfedf['GFE'])):

        gfe = gfedf['GFE'][i]
        locus = gfedf['Locus'][i]
        subid = gfedf['ID'][i]
        aligned = gfedf['aligned'][i]
        seqlength = gfedf['length'][i]
        hmlfile = gfedf['HML'][i]
        allele_call = typer.type_hla(locus, '', gfe)
        if isinstance(allele_call, Error):
            gfe_typing[i] = [subid, hmlfile, locus, gfe, aligned, seqlength, 'FAILED', 'FAILED', 'FAILED','FAILED']
        else:
            hla = "/".join([typ.hla for typ in allele_call.typing])
            ref = "/".join([typ.hla for typ in allele_call.ihiw_ref])
            status = allele_call.typing_status.status
            feats = []
            if hasattr(allele_call.typing_status, 'novel_features'):
                if allele_call.typing_status.novel_features:
                    for feat in allele_call.typing_status.novel_features:
                        feats.append("-".join([feat.term, str(feat.rank)]))
            novel_feats = ";".join(feats)
            gfe_typing[i] = [subid, hmlfile, locus, gfe, aligned, seqlength, hla, ref, status, novel_feats]

    gfe_df = pa.DataFrame(gfe_typing, columns=["SampleID", "HML", "Locus", "GFE", "Aligned", "Seqlength", "AlleleCall", "Reference", "Status", "Novel Features"])
    gfe_df.to_csv(output, index=False, sep=',')


if __name__ == '__main__':
    """The following will be run if file is executed directly,
    but not if imported as a module"""
    main()






